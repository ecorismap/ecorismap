plugins {
    id 'com.android.application'
    id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'
}
apply plugin: "com.android.application"
apply plugin: "com.facebook.react"


import com.android.build.OutputFile



def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

def reactNativeRoot = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsolutePath()

project.ext.react = [
    entryFile: ["node", "-e", "require('expo/scripts/resolveAppEntry')", projectRoot, "android"].execute(null, rootDir).text.trim(),
    enableHermes: true,
    hermesCommand: new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsolutePath() + "/sdks/hermesc/%OS-BIN%/hermesc",
    cliPath: "${reactNativeRoot}/cli.js",
    composeSourceMapsPath: "${reactNativeRoot}/scripts/compose-source-maps.js",
]

apply from: new File(reactNativeRoot, "react.gradle")

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = (findProperty('android.enableProguardInReleaseBuilds') ?: false).toBoolean()

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and that value will be read here. If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false);

/**
 * Architectures to build native code for.
 */
def reactNativeArchitectures() {
    def value = project.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

android {
    ndkVersion rootProject.ext.ndkVersion

    compileSdkVersion rootProject.ext.compileSdkVersion
    namespace "jp.co.ecoris.ecorismap"
    defaultConfig {
        applicationId "jp.co.ecoris.ecorismap"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 75
        versionName '0.2.0'
    }

  

    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include (*reactNativeArchitectures())
        }
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // https://developer.android.com/studio/build/configure-apk-splits.html
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }

        }
    }
}

// Apply static values from `gradle.properties` to the `android.packagingOptions`
// Accepts values in comma delimited lists, example:
// android.packagingOptions.pickFirsts=/LICENSE,**/picasa.ini
// ["pickFirsts", "excludes", "merges", "doNotStrip"].each { prop ->
//     // Split option: 'foo,bar' -> ['foo', 'bar']
//     def options = (findProperty("android.packagingOptions.$prop") ?: "").split(",");
//     // Trim all elements in place.
//     for (i in 0..<options.size()) options[i] = options[i].trim();
//     // `[] - ""` is essentially `[""].filter(Boolean)` removing all empty strings.
//     options -= ""

//     if (options.length > 0) {
//         println "android.packagingOptions.$prop += $options ($options.length)"
//         // Ex: android.packagingOptions.pickFirsts += '**/SCCS/**'
//         options.each {
//             android.packagingOptions[prop] += it
//         }
//     }
// }

dependencies {
    // implementation fileTree(dir: "libs", include: ["*.jar"])

    // //noinspection GradleDynamicVersion
    // implementation "com.facebook.react:react-native:+"  // From node_modules

    // def isGifEnabled = (findProperty('expo.gif.enabled') ?: "") == "true";
    // def isWebpEnabled = (findProperty('expo.webp.enabled') ?: "") == "true";
    // def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: "") == "true";
    // def frescoVersion = rootProject.ext.frescoVersion

    // // If your app supports Android versions before Ice Cream Sandwich (API level 14)
    // if (isGifEnabled || isWebpEnabled) {
    //     implementation "com.facebook.fresco:fresco:${frescoVersion}"
    //     implementation "com.facebook.fresco:imagepipeline-okhttp3:${frescoVersion}"
    // }

    // if (isGifEnabled) {
    //     // For animated gif support
    //     implementation "com.facebook.fresco:animated-gif:${frescoVersion}"
    // }

    // if (isWebpEnabled) {
    //     // For webp support
    //     implementation "com.facebook.fresco:webpsupport:${frescoVersion}"
    //     if (isWebpAnimatedEnabled) {
    //         // Animated webp support
    //         implementation "com.facebook.fresco:animated-webp:${frescoVersion}"
    //     }
    // }

    implementation("com.facebook.react:react-android")

    implementation("androidx.swiperefreshlayout:swiperefreshlayout:1.0.0")

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}")
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }
    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}") 
    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
