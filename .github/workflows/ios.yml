name: iOS Build and Upload
on: [push, workflow_dispatch]
jobs:
  build-and-upload:
    name: Build and Upload to App Store
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'yarn'

      - name: Create Maps.plist
        run: |
          mkdir -p ios/ecorismap/Supporting
          cat << EOF > ios/ecorismap/Supporting/Maps.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>APIKey</key>
            <string>${{ secrets.MAPS_API_KEY }}</string>
          </dict>
          </plist>
          EOF

      - name: Create GoogleService-Info.plist
        run: |
          echo "${{ secrets.GOOGLE_SERVICE_INFO_PLIST }}" | base64 --decode > ios/ecorismap/GoogleService-Info.plist

      - name: Create ExportOptions.plist
        run: |
          echo '${{ secrets.EXPORT_OPTIONS }}' > ExportOptions.plist

      - name: Setup Certificate and Provisioning Profile
        run: |
          # Create directories
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles

          # Decode and install certificate (.p12)
          echo "${{ secrets.IOS_CERTIFICATE_BASE64 }}" | base64 --decode > certificate.p12
          security create-keychain -p temp_pass build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p temp_pass build.keychain
          security import certificate.p12 -k build.keychain -P "${{ secrets.IOS_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k temp_pass build.keychain

          # Decode and install provisioning profile
          echo "${{ secrets.IOS_PROVISION_PROFILE_BASE64 }}" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/ecorismap.mobileprovision

      - name: Download and integrate react-native-gdalwarp
        run: |
          curl -L -o react-native-gdalwarp.zip https://github.com/tmizu23/build_gdal_android_ios/releases/download/v0.0.1/react-native-gdalwarp.zip
          unzip react-native-gdalwarp.zip
          mkdir -p modules
          cp -r react-native-gdalwarp modules/

      - name: Install dependencies
        run: yarn install

      - name: Clean build and derived data
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
          rm -rf ios/build
          rm -rf ios/Pods
          yarn cache clean
          cd ios && pod install

      - name: Archive Project
        env:
          NODE_BINARY: $(which node)
        run: |
          xcodebuild archive -workspace ios/ecorismap.xcworkspace \
                             -scheme ecorismap \
                             -sdk iphoneos \
                             -configuration Release \
                             -archivePath ecorismap.xcarchive \
                             CODE_SIGN_STYLE=Manual \
                             PROVISIONING_PROFILE_SPECIFIER="$(/usr/libexec/PlistBuddy -c 'Print Name' /dev/stdin <<< $(security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/ecorismap.mobileprovision))"

      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
                     -archivePath ecorismap.xcarchive \
                     -exportOptionsPlist ExportOptions.plist \
                     -exportPath app.ipa

      - name: Upload IPA to App Store Connect
        run: |
          xcrun altool --upload-app -f app.ipa/ecorismap.ipa \
                       -u ${{ secrets.APPLE_ID }} \
                       -p ${{ secrets.APP_SPECIFIC_PASSWORD }} \
                       --type ios
