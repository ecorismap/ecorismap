rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    match /projects/{projectId}/PHOTO/{layerId}/{userId}/{allPaths=**} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == userId
        && isValidContentType(request.resource)
        && isValidFileSize(request.resource);
      allow delete: if isSignedIn()
    }
    match /projects/{projectId}/PDF/{allPaths=**} {
      allow read: if isSignedIn();
      allow create: if isSignedIn()
        && isValidContentType(request.resource)
        && isValidFileSize(request.resource);
      allow delete: if isSignedIn()
    }
    match /projects/{projectId}/DICTIONARY/{layerId}/{allPaths=**} {
      allow read: if isSignedIn();
      allow create: if isSignedIn()
        && isValidContentType(request.resource)
        && isValidFileSize(request.resource);
      allow delete: if isSignedIn()
    }
    match /projects/{projectId}/{allPaths=**} {
      allow list: if isSignedIn();
      allow delete: if isSignedIn()
    }
  }

  function isSignedIn() {
    return request.auth != null && request.auth.token.email_verified;
  }
 
  function isValidContentType(data) {
    return data.contentType in ['image/png',"image/jpeg","application/pdf","application/x-sqlite3"];
  }

  function isValidFileSize(data) {
    return data.size < 20 * 1024 * 1024
  }
}