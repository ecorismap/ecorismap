diff --git a/node_modules/pmtiles/index.ts b/node_modules/pmtiles/index.ts
index 3d5a43e..562c268 100644
--- a/node_modules/pmtiles/index.ts
+++ b/node_modules/pmtiles/index.ts
@@ -1,5 +1,6 @@
 import { decompressSync } from "fflate";
 import v2 from "./v2";
+import {Buffer} from "buffer";
 export * from "./adapters";
 
 /** @hidden */
@@ -378,7 +379,7 @@ export class FetchSource implements Source {
 
     let resp = await fetch(this.url, {
       signal: signal,
-      cache: cache,
+      cache: 'no-store',
       headers: requestHeaders,
       //biome-ignore lint: "cache" is incompatible between cloudflare workers and browser
     } as any);
@@ -414,15 +415,15 @@ export class FetchSource implements Source {
       throw Error(`Bad response code: ${resp.status}`);
     }
 
-    // some well-behaved backends, e.g. DigitalOcean CDN, respond with 200 instead of 206
-    // but we also need to detect no support for Byte Serving which is returning the whole file
-    const contentLength = resp.headers.get("Content-Length");
-    if (resp.status === 200 && (!contentLength || +contentLength > length)) {
-      if (controller) controller.abort();
-      throw Error(
-        "Server returned no content-length header or content-length exceeding request. Check that your storage backend supports HTTP Byte Serving."
-      );
-    }
+    // // some well-behaved backends, e.g. DigitalOcean CDN, respond with 200 instead of 206
+    // // but we also need to detect no support for Byte Serving which is returning the whole file
+    // const contentLength = resp.headers.get("Content-Length");
+    // if (resp.status === 200 && (!contentLength || +contentLength > length)) {
+    //   if (controller) controller.abort();
+    //   throw Error(
+    //     "Server returned no content-length header or content-length exceeding request. Check that your storage backend supports HTTP Byte Serving."
+    //   );
+    // }
 
     const a = await resp.arrayBuffer();
     return {
@@ -1036,8 +1037,8 @@ export class PMTiles {
       resp.data,
       header.internalCompression
     );
-    const dec = new TextDecoder("utf-8");
-    return JSON.parse(dec.decode(decompressed));
+    const jsonString = Buffer.from(decompressed).toString('utf-8');
+    return JSON.parse(jsonString);
   }
 
   /**
