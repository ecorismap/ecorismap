diff --git a/node_modules/pmtiles/README.md b/node_modules/pmtiles/README.md
index 26e88e6..93f6f31 100644
--- a/node_modules/pmtiles/README.md
+++ b/node_modules/pmtiles/README.md
@@ -1,6 +1,6 @@
 # PMTiles for Browsers + NodeJS
 
-See the [JavaScript API docs](https://pmtiles.io/typedoc/)
+See the [JavaScript API docs](https://protomaps.github.io/PMTiles/typedoc/)
 
 the [PMTiles](https://www.npmjs.com/package/pmtiles) package can be included via script tag or ES6 module:
 
@@ -26,7 +26,7 @@ const p = new PMTiles('example.pmtiles')
 leafletRasterLayer(p,{attribution:'Â© <a href="https://openstreetmap.org">OpenStreetMap</a>'}).addTo(map)
 ````
 
-[Live example](https://pmtiles.io/examples/leaflet.html) | [Code](https://github.com/protomaps/PMTiles/blob/main/js/examples/leaflet.html)
+[Live example](https://protomaps.github.io/PMTiles/examples/leaflet.html) | [Code](https://github.com/protomaps/PMTiles/blob/main/js/examples/leaflet.html)
 
 ### Leaflet: Vector tileset
 
@@ -50,7 +50,7 @@ var style = {
     ...
 ```
 
-[Live example](https://pmtiles.io/examples/maplibre.html) | [Code](https://github.com/protomaps/PMTiles/blob/main/js/examples/maplibre.html)
+[Live example](https://protomaps.github.io/PMTiles/examples/maplibre.html) | [Code](https://github.com/protomaps/PMTiles/blob/main/js/examples/maplibre.html)
 
 # CORS
 
diff --git a/node_modules/pmtiles/dist/index.cjs b/node_modules/pmtiles/dist/index.cjs
index f306d7e..7dc5da0 100644
--- a/node_modules/pmtiles/dist/index.cjs
+++ b/node_modules/pmtiles/dist/index.cjs
@@ -1176,9 +1176,7 @@ var FetchSource = class {
       }
       if (resp.status === 416 || etag && newEtag && newEtag !== etag) {
         this.mustReload = true;
-        throw new EtagMismatch(
-          `Server returned non-matching ETag ${etag} after one retry. Check browser extensions and servers for issues that may affect correct ETag headers.`
-        );
+        throw new EtagMismatch(etag);
       }
       if (resp.status >= 300) {
         throw Error(`Bad response code: ${resp.status}`);
diff --git a/node_modules/pmtiles/dist/index.js b/node_modules/pmtiles/dist/index.js
index a3f437e..e5cdb3e 100644
--- a/node_modules/pmtiles/dist/index.js
+++ b/node_modules/pmtiles/dist/index.js
@@ -1136,9 +1136,7 @@ var FetchSource = class {
       }
       if (resp.status === 416 || etag && newEtag && newEtag !== etag) {
         this.mustReload = true;
-        throw new EtagMismatch(
-          `Server returned non-matching ETag ${etag} after one retry. Check browser extensions and servers for issues that may affect correct ETag headers.`
-        );
+        throw new EtagMismatch(etag);
       }
       if (resp.status >= 300) {
         throw Error(`Bad response code: ${resp.status}`);
diff --git a/node_modules/pmtiles/dist/pmtiles.js b/node_modules/pmtiles/dist/pmtiles.js
index f1417a6..909cd4d 100644
--- a/node_modules/pmtiles/dist/pmtiles.js
+++ b/node_modules/pmtiles/dist/pmtiles.js
@@ -1176,9 +1176,7 @@ var pmtiles = (() => {
         }
         if (resp.status === 416 || etag && newEtag && newEtag !== etag) {
           this.mustReload = true;
-          throw new EtagMismatch(
-            `Server returned non-matching ETag ${etag} after one retry. Check browser extensions and servers for issues that may affect correct ETag headers.`
-          );
+          throw new EtagMismatch(etag);
         }
         if (resp.status >= 300) {
           throw Error(`Bad response code: ${resp.status}`);
diff --git a/node_modules/pmtiles/index.ts b/node_modules/pmtiles/index.ts
index 9d83c78..e5223c1 100644
--- a/node_modules/pmtiles/index.ts
+++ b/node_modules/pmtiles/index.ts
@@ -407,24 +407,22 @@ export class FetchSource implements Source {
     // some storage systems are misbehaved (Cloudflare R2)
     if (resp.status === 416 || (etag && newEtag && newEtag !== etag)) {
       this.mustReload = true;
-      throw new EtagMismatch(
-        `Server returned non-matching ETag ${etag} after one retry. Check browser extensions and servers for issues that may affect correct ETag headers.`
-      );
+      throw new EtagMismatch(etag);
     }
 
     if (resp.status >= 300) {
       throw Error(`Bad response code: ${resp.status}`);
     }
 
-    // some well-behaved backends, e.g. DigitalOcean CDN, respond with 200 instead of 206
-    // but we also need to detect no support for Byte Serving which is returning the whole file
-    const contentLength = resp.headers.get("Content-Length");
-    if (resp.status === 200 && (!contentLength || +contentLength > length)) {
-      if (controller) controller.abort();
-      throw Error(
-        "Server returned no content-length header or content-length exceeding request. Check that your storage backend supports HTTP Byte Serving."
-      );
-    }
+    // // some well-behaved backends, e.g. DigitalOcean CDN, respond with 200 instead of 206
+    // // but we also need to detect no support for Byte Serving which is returning the whole file
+    // const contentLength = resp.headers.get("Content-Length");
+    // if (resp.status === 200 && (!contentLength || +contentLength > length)) {
+    //   if (controller) controller.abort();
+    //   throw Error(
+    //     "Server returned no content-length header or content-length exceeding request. Check that your storage backend supports HTTP Byte Serving."
+    //   );
+    // }
 
     const a = await resp.arrayBuffer();
     return {
